t a/classes/AutoTest.js b/classes/AutoTest.js
index 87b9563..cf50535 100644
--- a/classes/AutoTest.js
+++ b/classes/AutoTest.js
@@ -1,13 +1,14 @@
 const { chromium } = require('playwright');
 
 class AutoTest {
-  constructor(){
+  constructor({port=9222}){
     this.browser = null;
     this.context = null;
+    this.port = port;
   }
 
   async initialize() {
-    this.browser = await chromium.connectOverCDP('http://localhost:9222');
+    this.browser = await chromium.connectOverCDP(`http://localhost:${this.port}`);
     this.context = this.browser.contexts()[0];
   }
 
@@ -35,6 +36,9 @@ class AutoTest {
     try {
       const page = await this.getPage('chatgpt.com');
       await page.fill('#prompt-textarea', text)
+
+      // --- 这里怎么等待2秒后再执行后续操作
+      // await page.waitForTimeout(2000);
       await page.click('[data-testid="send-button"]');
       
       // 等待 stop-button 可见
@@ -49,6 +53,21 @@ class AutoTest {
       const elements = page.locator('div[data-testid^="conversation-turn-"]');
       const lastElement = elements.nth(await elements.count() - 1);
       
+      // 检查最后一个 conversation-turn 元素是否包含含有指定字符串的子元素
+      const isBloken = await lastElement.evaluate((element) => {
+        let _isBloken = Array.from(element.children).some(child => 
+          child.innerHTML.includes('此内容可能违反了我们的')
+        );
+        if(_isBloken){
+          console.log('违反使用政策被终止，翻译不完整');
+        }
+        return _isBloken
+      });
+
+      if(isBloken){
+        return false
+      }
+
       // 在最后一个 conversation-turn 元素中抓取 class="markdown" 元素
       const markdownElement = lastElement.locator('.markdown');
       const markdownHtml = await markdownElement.innerHTML();
diff --git a/classes/Novel.js b/classes/Novel.js
index 7d62ad8..97d8aa0 100644
--- a/classes/Novel.js
+++ b/classes/Novel.js
@@ -39,7 +39,7 @@ class Novel {
     bookSheet.addSheetDatas({datas: items})
   }
 
-  splitChapterContent(chapterCont, perWordCont = 500) {
+  splitChapterContent(chapterCont, perWordCont = 2500) {
     let outPutArr = [];
     let currentSegment = '';
     let currentLength = 0;
diff --git a/classes/Util.js b/classes/Util.js
index 6f099f8..6d9796c 100644
--- a/classes/Util.js
+++ b/classes/Util.js
@@ -41,11 +41,18 @@ var Util = {};
     },
 
     async gptAsk(text){
+      let port = 9222
+      if(navigator.userAgent.includes('Chrome/127.0.0.0')) { // 本地默认商用chrome浏览器是127，chromium是128
+        port = 9224
+      }
+      console.log({port, text});
+
       let res = await this.request({
         url: `http://localhost:9000/gptFillQuery`,
         method: 'post',
         data: {
-          text
+          text,
+          port,
         }
       })
       return res.data
diff --git a/server_start.js b/server_start.js
index 7050d5a..40b0ca6 100644
--- a/server_start.js
+++ b/server_start.js
@@ -240,12 +240,13 @@ app.post('/getNovelRows', async (req, res) => {
   const Novel = require('./classes/Novel.js')
   const novel = new Novel()
   datas.forEach(n => {
-    let arr = novel.splitChapterContent(n.cnCont)
-    let cnParts = {}
-    arr.forEach((n1, i1) => {
-      cnParts[`part${i1}`] = n1
-    })
-    n.cnParts = cnParts
+    let arr = novel.splitChapterContent(n.cnCont, 2500)
+    n.cnParts = arr
+    // let cnParts = {}
+    // arr.forEach((n1, i1) => {
+    //   cnParts[`part${i1}`] = n1
+    // })
+    // n.cnParts = cnParts
   })
 
   let idsObj = {}
diff --git a/server_start_local.js b/server_start_local.js
index d0f30a6..931b41a 100644
--- a/server_start_local.js
+++ b/server_start_local.js
@@ -35,10 +35,9 @@ app.all('*', function(req, res, next) {
 });
 
 app.post('/gptFillQuery', async (req, res) => {
-  console.log(1111111);
-  const {text} = req.body
+  const {text, port} = req.body
   const AutoTest = require('./classes/AutoTest.js')
-  const autoTest = new AutoTest()
+  const autoTest = new AutoTest({port})
   await autoTest.initialize();
   const unswer = await autoTest.gptFillQuery(text)
   res.send({code: 200, data: unswer})
diff --git a/tampermonkeys/chatgpt/ChatgptApp.js b/tampermonkeys/chatgpt/ChatgptApp.js
index d61662f..c16cf48 100644
--- a/tampermonkeys/chatgpt/ChatgptApp.js
+++ b/tampermonkeys/chatgpt/ChatgptApp.js
@@ -7,7 +7,7 @@ const template = `
 `
 
 const role = `
-你是一位专业的中英文学翻译家，专长于将中文小说翻译成英文。你的任务是翻译辰东的《完美世界》这部作品。
+你是一位专业的中英文学翻译家，专长于将中文小说翻译成英文。
 
 **翻译要求：**
 
@@ -25,7 +25,7 @@ const role = `
    - 保持原文中的任何格式，如段落分隔和对话结构。
 
 5. **输出格式：**
-   - 请直接输出翻译结果，翻译结果不要markdown代码编辑器输出，章节标题用h2标签输出，不附加任何额外的说明或信息。
+   - 请直接输出翻译结果，翻译结果不要markdown代码编辑器输出，章节标题用h2标签输出，格式如"Chapter 24: The Divine Weapon"，不附加任何额外的说明或信息。
 `
 
 const ChatgptApp = {
@@ -92,21 +92,53 @@ const ChatgptApp = {
     if (!this.novels) {
       this.novels = await this.getNovelRows()
     }
-    let novel = this.novels.find(n => !n.enCont)
-    console.log('novel', novel);
 
-    let cnSection = `# ${novel.cnTitle} \n\n${novel.cnCont}`
-    let enHtml = await Util.gptAsk(cnSection)
-    if(!enHtml){
-      console.log('翻译出错，请重试');
+    let novel = this.novels.find(n => !n.enCont)
+    if(!novel){
+      GM_notification({
+        title: '所有翻译任务已执行完毕',
+        text: `所有翻译任务已执行完毕`,
+        timeout: 5000,
+        onclick: () => {
+          unsafeWindow.focus(); // 并不一定能用 
+        }
+      })
       return;
     }
 
-    let enTitle = ''
-    let enCont = enHtml.replace(/^<h2>(.*)<\/h2>/, (s, s1) => {
-      enTitle = s1
-      return ''
-    })
+    Util.getAsk(role)
+    const enTitle = await Util.getAsk(`请翻译章节标题： ${novel.title}`)
+    const enContArr = []
+    for(let i=0; i<novel.cnParts.length; i++){
+      let cnPart = novel.cnParts[i]
+      enPart = await Util.getAsk(`请翻译以下章节片段： \n\n${cnPart}`)
+      enContArr.push(enPart)
+    }
+    const enCont = enContArr.join('<br></br>')
+
+    // let cnSection = `# ${novel.cnTitle} \n\n${novel.cnCont}`
+    // let askCont = `${role} \n\n 下面是你要翻译的章节内容： \n\n ${cnSection}`
+    // let enHtml = await Util.gptAsk(askCont)
+    // if(!enHtml){
+    //   console.log('翻译出错，请重试');
+
+    //   GM_notification({
+    //     title: '翻译任务出错中断',
+    //     text: `翻译任务出错中断`,
+    //     timeout: 5000,
+    //     onclick: () => {
+    //       unsafeWindow.focus(); // 并不一定能用 
+    //     }
+    //   })
+
+    //   return;
+    // }
+
+    // let enTitle = ''
+    // let enCont = enHtml.replace(/^<h2>(.*)<\/h2>/, (s, s1) => {
+    //   enTitle = s1
+    //   return ''
+    // })
 
     novel.enTitle = enTitle
     novel.enCont = enCont
@@ -121,6 +153,9 @@ const ChatgptApp = {
       }
     })
     console.log('translate end', res);
+
+    // 翻译下一章节
+    this.translate();
   }
 }
 
diff --git a/tampermonkeys/chatgpt_monkey.js b/tampermonkeys/chatgpt_monkey.js
index e8f5fa1..4a838f0 100644
--- a/tampermonkeys/chatgpt_monkey.js
+++ b/tampermonkeys/chatgpt_monkey.js
@@ -27,7 +27,7 @@ const GptPage = {
 GM_addStyle(`
   /* 隐藏左上角chatgpt切换 */
   [aria-haspopup="menu"]{
-    display: none;
+    font-size: 0;
   }
 
   /* 隐藏升级plus弹窗 */

